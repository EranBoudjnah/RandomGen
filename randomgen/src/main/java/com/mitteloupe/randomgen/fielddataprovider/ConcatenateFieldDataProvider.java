package com.mitteloupe.randomgen.fielddataprovider;

import com.mitteloupe.randomgen.FieldDataProvider;

import java.util.Arrays;
import java.util.List;

/**
 * Created by Eran Boudjnah on 15/08/2018.
 */
public final class ConcatenateFieldDataProvider<OUTPUT_TYPE> implements FieldDataProvider<OUTPUT_TYPE, String> {
	private static final String DEFAULT_DELIMITER = "";

	private String mDelimiter;
	private List<FieldDataProvider<OUTPUT_TYPE, ?>> mFieldDataProviders;

	/**
	 * Returns a new instance of {@link ConcatenateFieldDataProvider} generating a concatenated {@code String} of
	 * the outputs generated by the provided {@link FieldDataProvider} instances using the default delimiter.
	 *
	 * @param pFieldDataProviders Concatenate the output of these FieldDataProvider instances
	 */
	@SafeVarargs
	public static <OUTPUT_TYPE> ConcatenateFieldDataProvider<OUTPUT_TYPE> getInstanceWithProviders(
		FieldDataProvider<OUTPUT_TYPE, ?>... pFieldDataProviders
	) {
		return new ConcatenateFieldDataProvider<>(pFieldDataProviders);
	}

	/**
	 * Returns a new instance of {@link ConcatenateFieldDataProvider} generating a concatenated {@code String} of
	 * the outputs generated by the provided {@link FieldDataProvider} instances using the provided delimiter.
	 *
	 * @param pDelimiter          The delimiter to use when concatenating
	 * @param pFieldDataProviders Concatenate the output of these FieldDataProvider instances
	 */
	@SafeVarargs
	public static <OUTPUT_TYPE> ConcatenateFieldDataProvider<OUTPUT_TYPE> getInstanceWithDelimiterAndProviders(
		String pDelimiter,
		FieldDataProvider<OUTPUT_TYPE, ?>... pFieldDataProviders
	) {
		return new ConcatenateFieldDataProvider<>(pDelimiter, pFieldDataProviders);
	}

	@SafeVarargs
	private ConcatenateFieldDataProvider(FieldDataProvider<OUTPUT_TYPE, ?>... pFieldDataProviders) {
		this(DEFAULT_DELIMITER, pFieldDataProviders);
	}

	@SafeVarargs
	private ConcatenateFieldDataProvider(String pDelimiter, FieldDataProvider<OUTPUT_TYPE, ?>... pFieldDataProviders) {
		mDelimiter = pDelimiter;
		mFieldDataProviders = Arrays.asList(pFieldDataProviders);
	}

	@Override
	public String generate(OUTPUT_TYPE pInstance) {
		StringBuilder result = new StringBuilder();

		for (FieldDataProvider<OUTPUT_TYPE, ?> fieldDataProvider : mFieldDataProviders) {
			result
				.append(fieldDataProvider.generate(pInstance))
				.append(mDelimiter);
		}

		if (result.length() != 0 && mDelimiter.length() != 0) {
			result.delete(result.length() - mDelimiter.length(), result.length());
		}

		return result.toString();
	}
}
