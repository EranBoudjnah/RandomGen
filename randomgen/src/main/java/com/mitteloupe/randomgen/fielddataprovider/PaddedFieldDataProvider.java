package com.mitteloupe.randomgen.fielddataprovider;

import com.mitteloupe.randomgen.FieldDataProvider;

/**
 * A {@link FieldDataProvider} that pads generated data (as {@code String}) with repetitions of the provided {@code String}.
 *
 * Created by Eran Boudjnah on 16/08/2018.
 */
public class PaddedFieldDataProvider<OUTPUT_TYPE> implements FieldDataProvider<OUTPUT_TYPE, String> {
	private final int mMinimumLength;
	private final String mPaddingString;
	private final FieldDataProvider<OUTPUT_TYPE, ?> mFieldDataProvider;

	/**
	 * Creates an instance of {@link PaddedFieldDataProvider} generating a padded {@code String} of
	 * the output generated by the provided {@link FieldDataProvider} instance using an infinitely repeated {@code String} of copies of
	 * the provided padding {@code String}.
	 *
	 * If the {@code String} generated by the {@link FieldDataProvider} instance is not shorter than the provided minimum length, it is returned
	 * as is.
	 *
	 * @param pMinimumLength     The minimal returned String length
	 * @param pPaddingString     The string to use for padding
	 * @param pFieldDataProvider A provider for strings to pad
	 */
	public PaddedFieldDataProvider(int pMinimumLength, String pPaddingString, FieldDataProvider<OUTPUT_TYPE, ?> pFieldDataProvider) {
		mMinimumLength = pMinimumLength;
		mPaddingString = pPaddingString;
		mFieldDataProvider = pFieldDataProvider;
	}

	@Override
	public String generate(OUTPUT_TYPE instance) {
		String generatedString = getGeneratedString(instance);

		int charactersMissing = mMinimumLength - generatedString.length();

		StringBuilder stringBuilder = getStringBuilderWithPadding(charactersMissing);

		return stringBuilder
			.append(generatedString)
			.toString();
	}

	private StringBuilder getStringBuilderWithPadding(int pPaddingLength) {
		StringBuilder stringBuilder = new StringBuilder();

		while (!mPaddingString.isEmpty() && stringBuilder.length() < pPaddingLength) {
			stringBuilder.append(mPaddingString);
		}

		if (stringBuilder.length() > pPaddingLength && pPaddingLength > 0) {
			stringBuilder.delete(pPaddingLength, stringBuilder.length());
		}
		return stringBuilder;
	}

	private String getGeneratedString(OUTPUT_TYPE instance) {
		return mFieldDataProvider.generate(instance).toString();
	}
}
